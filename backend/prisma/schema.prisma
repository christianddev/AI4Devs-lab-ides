// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  RECRUITER
}

enum CandidateStatus {
  NEW
  REVIEWING
  INTERVIEWING
  OFFERED
  HIRED
  REJECTED
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole  @default(RECRUITER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  interactions  CandidateInteraction[]
}

model Candidate {
  id            Int       @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String    @unique
  phone         String
  address       String?
  linkedinUrl   String?
  status        CandidateStatus @default(NEW)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  experiences   Experience[]
  education     Education[]
  files         FileRecord[]
  interactions  CandidateInteraction[]
}

model Experience {
  id          Int       @id @default(autoincrement())
  title       String
  company     String
  startDate   DateTime
  endDate     DateTime?
  description String?
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int
}

model Education {
  id          Int       @id @default(autoincrement())
  title       String
  institution String
  startDate   DateTime
  endDate     DateTime
  description String?
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int
}

model FileRecord {
  id          Int       @id @default(autoincrement())
  filename    String
  path        String
  mimetype    String
  size        Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int
  createdAt   DateTime  @default(now())
}

model CandidateInteraction {
  id          Int       @id @default(autoincrement())
  type        String
  notes       String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
}